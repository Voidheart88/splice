// Spice Grammar

// This grammar defines the syntax of the Spice language.

// A spice file is a series of spice directives separated by newlines
// It begins with a SOI and ends with an EOI.
// spice files are case insensitive
SPICE = { SOI ~ NEWLINE* ~ (COMMENT | DIRECTIVE)* ~ NEWLINE* ~ WHITE_SPACE* ~ EOI }

// A directive can be an element or a command
DIRECTIVE = { (ELE ~ NEWLINE*) | (COMMAND ~ NEWLINE*) }

// A comment starts with a Asterisk followed by an Arbitrary number of Alphanumerics
COMMENT = { "*" ~ ASCII_ALPHANUMERIC* ~ NEWLINE* }

// An element could be a VSource, a resistor, or a diode
// An element could be a VSource, a resistor, a diode, a capacitor, or an inductor
ELE = { ELE_VSOURCE | ELE_ISOURCE | ELE_RESISTOR | ELE_DIODE | ELE_CAPACITOR | ELE_INDUCTOR | ELE_MOSFET}

ELE_VSOURCE = { ^"v" ~ ELEMENT_NAME ~ WHITE_SPACE+ ~ NODE ~ WHITE_SPACE+ ~ NODE ~ WHITE_SPACE+ ~ VALUE ~ (WHITE_SPACE+ ~ SOURCE_AC_OPTION)?}
ELE_ISOURCE = { ^"i" ~ ELEMENT_NAME ~ WHITE_SPACE+ ~ NODE ~ WHITE_SPACE+ ~ NODE ~ WHITE_SPACE+ ~ VALUE ~ (WHITE_SPACE+ ~ SOURCE_AC_OPTION)?}
ELE_RESISTOR = { ^"r" ~ ELEMENT_NAME ~ WHITE_SPACE+ ~ NODE ~ WHITE_SPACE+ ~ NODE ~ WHITE_SPACE+ ~ VALUE }
ELE_CAPACITOR = { ^"c" ~ ELEMENT_NAME ~ WHITE_SPACE+ ~ NODE ~ WHITE_SPACE+ ~ NODE ~ WHITE_SPACE+ ~ VALUE }
ELE_INDUCTOR = { ^"l" ~ ELEMENT_NAME ~ WHITE_SPACE+ ~ NODE ~ WHITE_SPACE+ ~ NODE ~ WHITE_SPACE+ ~ VALUE }
ELE_DIODE = { ^"d" ~ ELEMENT_NAME ~ WHITE_SPACE+ ~ NODE ~ WHITE_SPACE+ ~ NODE ~ (WHITE_SPACE+ ~ DIODE_MODEL)? ~ WHITE_SPACE*}
ELE_MOSFET = { ^"m" ~ ELEMENT_NAME ~ WHITE_SPACE+ ~ NODE ~ WHITE_SPACE+ ~ NODE ~ WHITE_SPACE+ ~ NODE}


ELEMENT_NAME = { ASCII_ALPHANUMERIC* }

// AC option for voltage sources
SOURCE_AC_OPTION = { ^"ac" ~ WHITE_SPACE+ ~ VALUE }

DIODE_MODEL = { ^"d" ~ WHITE_SPACE* ~ DIODE_PAR_BV }
DIODE_PAR_BV = { ^"bv" ~ WHITE_SPACE* ~ "=" ~ WHITE_SPACE* ~ VALUE }

// A command can be OP, DC, AC, or Tran
COMMAND = { CMD_OP | CMD_DC | CMD_AC | CMD_TRAN | CMD_INCLUDE }

// Simulation commands
CMD_OP = { ^".op" ~ WHITE_SPACE* }

CMD_DC = { ^".dc" ~ WHITE_SPACE+ ~ CMD_DC_SRC ~ WHITE_SPACE+ ~ VALUE ~ WHITE_SPACE+ ~ VALUE ~ WHITE_SPACE+ ~ VALUE ~ (WHITE_SPACE+ ~ CMD_DC_OPTIONAL_SRC? )? ~ WHITE_SPACE*}
CMD_DC_OPTIONAL_SRC = {CMD_DC_SRC ~ WHITE_SPACE+ ~ VALUE ~ WHITE_SPACE+ ~ VALUE ~ WHITE_SPACE+ ~ VALUE}
CMD_DC_SRC = {ASCII_ALPHANUMERIC+}

CMD_AC = { ^".ac" ~ WHITE_SPACE+ ~ CMD_AC_FSTART ~ WHITE_SPACE+ ~ CMD_AC_FEND ~ WHITE_SPACE+ ~ CMD_AC_STEPS ~ (WHITE_SPACE+ ~ CMD_AC_OPTION? )? ~ WHITE_SPACE*}
CMD_AC_FSTART = { ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)? }
CMD_AC_FEND = { ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)? }
CMD_AC_STEPS = { ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)? }
CMD_AC_OPTION = { ^"lin" | ^"dec" | ^"oct" }

CMD_TRAN = { ^".tran" ~ WHITE_SPACE+ ~ VALUE ~ WHITE_SPACE+ ~ VALUE }

// Misc commands
CMD_INCLUDE = {^".include" ~ WHITE_SPACE+ ~ (ASCII_ALPHANUMERIC | ".")+ }

// Definitions for common elements
NODE = { ASCII_ALPHANUMERIC+ }
VALUE = { ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)? }